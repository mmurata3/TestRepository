Michael Murata
FutureX Code Sample 2016

Note: I approximately worked on this assignment for 5 hours

QUESTIONS:

1.  What does the function gen_modified_key do?
2.  What problems or issues, if any, do you see with it?
3.  How could you improve the function, and what benefits would your 
    improvements make?
4.  What other additional improvements could you make to the rest of the code? 

ANSWERS:

1.
   gen_modified_key returns a pointer to a 32 byte unsigned character sequence. 
   The character sequence originates from the data array in main which is also 
   32 bytes. Every 8 characters, the first character is XOR'd with a modifier. 
   This process happens 4 times based on the original data. The new character 
   sequence is now a modification of the original data.

2.
   Here are the problems/issues I discovered:
      1) no error checking for malloc
      2) integrate_arrays assumes that both input char pointers and output char 
         pointer have at least length characters as well.
      3) some redundant code, temp_string[0] = 0 is not necessary since memset
         sets the first character to 0. The use of int8 leading is not required

3.
   Organization is key in good programming. Code shouldn't be written to
   simply solve a solution in a way only one programmer understands. It is
   difficult to determine what exactly this function is doing without going
   through each step carefully and keeping track of variables either in a
   debugger or manually. There are also several magic numbers hard coded into
   the source code which hold no signifcant meaning. 

   Here is a list of changes I would make to help with organization and
   shorten the amount of system calls:
      1) Remove variable temp_string. You don't need another array in order to 
         modify the orginal data. Simply determine the positions you want to 
         modify of the original data and change the variables values that are
         assigned in ret.
      2) Remove the calls to integrate_arrays function and add code to modify
         the return character pointer. This function can be useful, but if
         we will remove temp_string we no longer need this function.
      3) Remove int8 leading[3], there is no use of this value to simply store a
         a string representation of the value and then use atoi to go back to an
         integer. This value was also susceptible to a buffer overflow if the
         value were to exceed 99.
      4) Variable modifier should be renamed. The name implies that this value
         is going to be the modifier for the orginal data, which isn't entirely 
         true. The name is misleading.
       
4.
   Other than the improvements above, I would suggest adding a argument to
   gen_modified_key to determine at what position the modifier would be 
   applied to the original data. However, since I am not allowed to change the 
   input parameters I have left this change out. 
      

Rewritten code:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <sys/time.h>

typedef int int32;
typedef unsigned char int8;

int8 *gen_modified_key(int8 modifier, const int8  *input_1, int32 length) {
   int8  *ret;
   int32 i_leading, i, xorValue;

   i = 0;
   i_leading = modifier/2;
   
   ret = (int8 *) malloc(length);
   if(ret == NULL){
      fprintf(stderr, "Memory allocation failure\n");
      exit(-1);
   }

   if( (modifier+1)%2 == 0 ) {
      xorValue = (int8)((i_leading<<4) + 8);
   } else {
      xorValue = (int8)(i_leading<<4);
   }   

   for(i=0; i<length; i++) {
      if(i%8==0){
         ret[i] = input_1[i] ^ xorValue;  
      } else {
         ret[i] = input_1[i];
      }
   }   
   return ret;
}   

// Do not change anything in main
// main only contains example input
// Change anything else
int main(int argc, char **argv) {
   // Example input data
   int8 data[32] = { 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,
      17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32};
   int8 *resp = gen_modified_key(0x10, data, sizeof(data));
   free(resp);

   return 0;
}

